apply plugin: "com.android.application"
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle" // <- add this line
apply plugin: "com.facebook.react"
apply plugin: "kotlin-android"
//apply plugin: "kotlin-android-extensions"

project.ext.envConfigFiles = [
        pocrelease:".env.poc",
        pocdebug:".env.poc",
        sitrelease:".env.sit",
        sitdebug:".env.sit",
        proddebug:".env.prod",
        prodrelease:".env.prod",
        uatdebug:".env.uat",
        uatrelease:".env.uat"
]

import org.apache.tools.ant.taskdefs.condition.Os
import com.android.build.OutputFile
/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
*/

project.ext.react = [
    enableHermes: true,  // clean and rebuild if changing
]

def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and that value will be read here. If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

/**
 * Architectures to build native code for.
 */
def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

apply from: "../../node_modules/@sentry/react-native/sentry.gradle"
android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

//    namespace com.useronboarding
    flavorDimensions "default"
    productFlavors {
        poc {
            minSdkVersion rootProject.ext.minSdkVersion
            applicationId "com.useronboarding"
            targetSdkVersion rootProject.ext.targetSdkVersion
            resValue "string", "build_config_package", "com.useronboarding"
            versionCode 1
            versionName "1.0"
        }
        sit {
            minSdkVersion rootProject.ext.minSdkVersion
            applicationId "org.reactjs.native.example.OnBoarding-sit"
            targetSdkVersion rootProject.ext.targetSdkVersion
            resValue "string", "build_config_package", "com.useronboarding"
            versionCode 1
            versionName "1.0"
        }
        prod {
            minSdkVersion rootProject.ext.minSdkVersion
            applicationId "org.reactjs.native.example.OnBoarding-prod"
            targetSdkVersion rootProject.ext.targetSdkVersion
            resValue "string", "build_config_package", "com.useronboarding"
            versionCode 1
            versionName "1.0"
        }
        uat {
            minSdkVersion rootProject.ext.minSdkVersion
            applicationId "com.useronboarding"
            targetSdkVersion rootProject.ext.targetSdkVersion
            resValue "string", "build_config_package", "com.useronboarding"
            versionCode 1
            versionName "1.0"
        }
    }

    defaultConfig {
        applicationId "com.useronboarding"
        missingDimensionStrategy 'react-native-camera', 'general' 
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
//        buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()

//        if (isNewArchitectureEnabled()) {
//            // We configure the CMake build only if you decide to opt-in for the New Architecture.
//            externalNativeBuild {
//                cmake {
//                    arguments "-DPROJECT_BUILD_DIR=$buildDir",
//                        "-DREACT_ANDROID_DIR=$rootDir/../node_modules/react-native/ReactAndroid",
//                        "-DREACT_ANDROID_BUILD_DIR=$rootDir/../node_modules/react-native/ReactAndroid/build",
//                        "-DNODE_MODULES_DIR=$rootDir/../node_modules",
//                        "-DANDROID_STL=c++_shared"
//                }
//            }
//            if (!enableSeparateBuildPerCPUArchitecture) {
//                ndk {
//                    abiFilters (*reactNativeArchitectures())
//                }
//            }
//        }
    }

//    if (isNewArchitectureEnabled()) {
//        // We configure the NDK build only if you decide to opt-in for the New Architecture.
//        externalNativeBuild {
//            cmake {
//                path "$projectDir/src/main/jni/CMakeLists.txt"
//            }
//        }
//        def reactAndroidProjectDir = project(':ReactAndroid').projectDir
//        def packageReactNdkDebugLibs = tasks.register("packageReactNdkDebugLibs", Copy) {
//            dependsOn(":ReactAndroid:packageReactNdkDebugLibsForBuck")
//            from("$reactAndroidProjectDir/src/main/jni/prebuilt/lib")
//            into("$buildDir/react-ndk/exported")
//        }
//        def packageReactNdkReleaseLibs = tasks.register("packageReactNdkReleaseLibs", Copy) {
//            dependsOn(":ReactAndroid:packageReactNdkReleaseLibsForBuck")
//            from("$reactAndroidProjectDir/src/main/jni/prebuilt/lib")
//            into("$buildDir/react-ndk/exported")
//        }
//        afterEvaluate {
//            // If you wish to add a custom TurboModule or component locally,
//            // you should uncomment this line.
//            // preBuild.dependsOn("generateCodegenArtifactsFromSchema")
//            preDebugBuild.dependsOn(packageReactNdkDebugLibs)
//            preReleaseBuild.dependsOn(packageReactNdkReleaseLibs)
//
//            // Due to a bug inside AGP, we have to explicitly set a dependency
//            // between configureCMakeDebug* tasks and the preBuild tasks.
//            // This can be removed once this is solved: https://issuetracker.google.com/issues/207403732
//            configureCMakeRelWithDebInfo.dependsOn(preReleaseBuild)
//            configureCMakeDebug.dependsOn(preDebugBuild)
//            reactNativeArchitectures().each { architecture ->
//                tasks.findByName("configureCMakeDebug[${architecture}]")?.configure {
//                    dependsOn("preDebugBuild")
//                }
//                tasks.findByName("configureCMakeRelWithDebInfo[${architecture}]")?.configure {
//                    dependsOn("preReleaseBuild")
//                }
//            }
//        }
//    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include (*reactNativeArchitectures())
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            // Example: versionCode 1 will generate 1001 for armeabi-v7a, 1002 for x86, etc.
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }

        }
    }
}

dependencies {
    implementation project(':react-native-config')
    implementation project(':react-native-view-pdf')
    implementation project(':react-native-print')
    implementation project(':reactnativesignaturecapture')

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    }  else {
        implementation jscFlavor
    }	    
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)

