// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MKIDBLE
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreBluetooth
import CoreFoundation
import Foundation
@_exported import MKIDBLE
import Security
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import eID_Shared_v110
@objc @_inheritsConvenienceInitializers public class Utilitys : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public class MKIDBLEHelper : ObjectiveC.NSObject {
  public init(appId: Swift.Int32)
  @objc public func getDeviceId(successHandler: @escaping (Swift.String) -> Swift.Void, errorHandler: @escaping (MKIDBLE.BLE_Error) -> Swift.Void)
  @objc public func getDeviceName(successHandler: @escaping (Swift.String) -> Swift.Void, errorHandler: @escaping (MKIDBLE.BLE_Error) -> Swift.Void)
  @objc public func checkAppActivated(successHandler: @escaping (Swift.Bool) -> Swift.Void, errorHandler: @escaping (MKIDBLE.BLE_Error) -> Swift.Void)
  @objc public func doActivate(url: Swift.String, andCustomerId: Swift.String, andProviderId: Swift.String, andBranchId: Swift.String, successHandler: @escaping () -> Swift.Void, andFailureHandler: @escaping (Swift.Error) -> (), errorHandler: @escaping (MKIDBLE.BLE_Error) -> ())
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class CardInfo : ObjectiveC.NSObject {
  @objc public var imageData: Foundation.Data?
  @objc public var IDNumber: Swift.String
  @objc public var FullName: Swift.String
  @objc public var DOB: Swift.String
  @objc public var Gender: Swift.String
  @objc public var Nationality: Swift.String
  @objc public var Hometown: Swift.String
  @objc public var Resident: Swift.String
  @objc public var DDND: Swift.String
  @objc public var ValidDate: Swift.String
  @objc public var ExpiredDate: Swift.String
  @objc public var OldIDNumber: Swift.String
  @objc public var transactionId: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RSAUtils {
  @objc deinit
}
@objc public enum BLE_Error : Swift.Int {
  case SETAPPID = 404
  case CARD_NO_SEARCH = 2
  case CARD_NO_Response = 1
  case UNKNOWN_ERROR = 999
  case SUCCESS = 0
  case CREATE_TEMPLATE_ERROR = 213
  case VERIFY_SOD_SERVER_ERROR = 303
  case FAILED_TO_VERIFY_SOD = 601
  case VERIFY_MOC_SERVER_ERROR = 301
  case VERIFY_MOC_FAILED_WRONG_FACE = 300
  case CARD_TIMEOUT = 203
  case ICAO_ERROR = 302
  case NOT_SUUCESS = 93
  case No_face_data = 299
  case licenseExpires = -1
  case Close = 12
  case NotConnect = 56
  case NotActivate = 600
  case ErrorTransactionID = 13
  case check_xor_error = 20
  case License_Calculator_Fail = 21
  case protocol_not_support = 22
  case device_error = 23
  case packet_len_error = 24
  case packet_cmd_error = 25
  case packet_data_error = 26
  case packet_cmd_format_error = 27
  case connect_smc_failure = 28
  case connect_smc_failure_first = 29
  public var description: Swift.String {
    get
  }
  case state_off = 30
  case state_unauthorized = 31
  case state_unsupported = 32
  case state_resetting = 33
  case state_unknown = 34
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol BLEReaderDelegate {
  @objc func errorMessage(_ value: MKIDBLE.BLE_Error)
  @objc func getSODresult(_ value: MKIDBLE.BLE_Error)
  @objc func getInfoCard(_ value: MKIDBLE.CardInfo)
  @objc func showLoading()
  @objc func hideLoading()
}
@objc public class BLEReader : ObjectiveC.NSObject {
  @objc weak public var delegate: MKIDBLE.BLEReaderDelegate?
  public init(bankTransactionId: Swift.String, andBankAppId: Swift.Int32, andBankTransInfo: Swift.String, andBankTransType: Swift.Int32)
  @objc public func readIdInfo(image: UIKit.UIImage)
  @objc deinit
}
extension MKIDBLE.BLEReader : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
}
extension MKIDBLE.BLEReader : CoreBluetooth.CBPeripheralDelegate {
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didWriteValueFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
}
extension MKIDBLE.BLE_Error : Swift.Equatable {}
extension MKIDBLE.BLE_Error : Swift.Hashable {}
extension MKIDBLE.BLE_Error : Swift.RawRepresentable {}
